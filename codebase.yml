# Code base structure:
# Frame - the skeleton that connects things together
# Toolkit - tools to perform actual job(s)
# Service - the idea here is to 'wrap' tools from Toolkit to be avaiable in multiple places (~singleton)
#		Hook - hooks to trigger in during the job. Probaly no need to be a standalone toolkit.

# Instances
# 1. Instance is a specific project, an instance of Uni Scraper
# 2. A name for instance could prefix with "unis-" as a convention
# 3. Instance consists of jobs. They are a building blocks. They have to 
#inherit from AbstractJob.php in order to have all tools requested in unis.json. 
# Inside them instructions are available: #browse(url), parse(page), extract(items), saveResults(). 
# A specific job can have its own user-defined instructions.
# 4. unis.json. Configuration file which holds to tweak the instance:
#which services from UNIS to use. How to use them. How to connect to storage and so on.
# 5. spec.json. Configuration file for jobs. Instance-level job.json is
#overwritten with job-level job.json files. They hold configuration as:
#paths to extract from, field maps, urls etc. Also cycles config (more advanced).
# 6. Run.php is a starting point.

#Parsing and extracting
#1. Parser returns collection NodeItem[]
#2. Extractor works only with collection NodeItem[]

# Worker:
# 1. Prepares environment: 
#		- reads unis.json and creates a set of tools available as services
#		- reads job.json 'global'
# 2. Scans jobs folder, creates jobs, runs them
#
#NOTE: AbstractJob:
#		- can access any tool (specified in unis.json) as service, so
# no need to ovehead it with bulk properties holding tools
#		- will have some 'magic' instructions:
#			* browse(url) -> page
#			* parse(page) -> nodes
#			* extract(nodes) -> records
#			* spec(keys) -> jobSpec

# AbstractNode.php:
#The result of parse is a set of nodes.
#Node is defined by:
# - its path in the tree
# - its family (ancestors, descendants, siblings)
# - its properties. E.g. for xml/html tags that would be: text and attributes.
#For json that would be only text
#
#NOTE: extractor works with nodes. And by default (if not specified in job.json)
#it extracts info from text property of the origin (progenitor) node

# AbstractService.php will have static::$dependancies to specify other
#services to be loaded. Now if e.g. config.db needs a db service and
#db also requested in unis.json, it won't be loaded twice.
- uni-scraper
  - app
    - Frame
      - Worker
      - Service
        - Config
          - Json
          - Ini
          - Yaml
          - Db
          - AbstractConfig.php
        - Db
        - Hook
        - AbstractService.php
      - Job
        - AbstractJob.php
    - Toolkit
      - Browser
        - Http
        - Js
        - BrowserToolkit.php
      - Extractor
        - Html
          - Extractor.php
          - Node.php
        - Extractor.php
        - Node.php
      - Parser
        - Html
        - Xml
        - Json
        - Yaml
        - AbstractNode.php
        - AbstractParser.php
      - Toolkit.php
  - vendor
  - test
  - instance
    - unis-sample
      - unis.json
      - config.job
      - run.php
      - job
       - home-page
         - home-page.php
          - config.job